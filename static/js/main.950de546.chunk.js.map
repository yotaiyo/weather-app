{"version":3,"sources":["components/CitySelector/CitySelector.js","components/LocationInfo/LocationInfo.js","components/Table/Table.js","components/Description/Description.js","components/PinpointLocations/PinpointLocations.js","components/dataAcquisitionAndOrganize/fetchWeatherInfo.js","config/baseURL.js","components/dataAcquisitionAndOrganize/dataOrganize.js","config/data.js","App.js","serviceWorker.js","index.js"],"names":["CitySelector","_ref","inputData","onChangeCityId","react_default","a","createElement","className","htmlFor","id","name","onChange","map","element","value","key","city_name","LocationInfo","locationArea","locationPrefecture","locationCity","displayText","concat","Table","props","today","table","tomorrow","dat","border","cellSpacing","cellPadding","date","telop","temperatureMax","temperatureMin","Description","description","title","text","PinpointLocations","pinpointLocations","input","href","link","fetchWeatherInfo","cityId","fetch","process","then","response","json","catch","error","console","tableAcquisition","forecasts","forecast","temperature","max","celsius","min","INPUT_DATA","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","location","setState","_","prevState","_this2","weatherInfo","area","prefecture","city","_this3","components_CitySelector_CitySelector","inputEvent","target","components_LocationInfo_LocationInfo","keys","length","components_Table_Table","components_Description_Description","components_PinpointLocations_PinpointLocations","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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AASC,SAC1BC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,MEkBnBE,EAzBU,SAAC/B,GACxB,GAAIA,EAAMgC,UACR,OAAOhC,EAAMgC,UAAU5C,IAAI,SAAA6C,GAazB,MAAO,CACLzB,KAboByB,EAAfzB,KAcLC,MAdoBwB,EAATxB,MAeXC,eAZAuB,EAASC,aACTD,EAASC,YAAYC,KACrBF,EAASC,YAAYC,IAAIC,SACzB,KAUAzB,eAREsB,EAASC,aACTD,EAASC,YAAYG,KACrBJ,EAASC,YAAYG,IAAID,SACzB,SC4iBKE,EA1jBI,CACjB,CACE9C,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,2BACbP,GAAM,UAER,CACEO,UAAa,2BACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,SACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,SACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,qBACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CACEO,UAAa,eACbP,GAAM,UAER,CAC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","file":"static/js/main.950de546.chunk.js","sourcesContent":["import React from 'react';\nimport \"./CitySelector.css\";\n\nconst CitySelector = ({inputData, onChangeCityId}) => {\n  return(\n    <div className=\"city-selector\" >\n      <label htmlFor=\"selector-box\">都市を選択してください</label>\n      <select id=\"selector-box\" name=\"selector-box\"　onChange={onChangeCityId}>\n        {inputData.map(element => <option value={element.id} key={element.id}> {element.city_name} </option>)}\n      </select>\n    </div>\n  )\n};\n\nexport default CitySelector;\n","import React from \"react\";\nimport \"./LocationInfo.css\"\n\nconst LocationInfo = ({locationArea,locationPrefecture,locationCity}) => {\n   let displayText = \"\"\n   if (locationArea){\n    displayText= `${locationArea} > ${locationPrefecture} > ${locationCity}`\n  }\n  return (\n    <div className=\"location-info-area\">\n      <div className=\"location-info\"> {displayText}</div>\n    </div>\n  )\n};\n\nexport default LocationInfo;\n","import React from \"react\";\nimport \"./Table.css\";\n\nconst Table = (props) => {\n  const today = props.table[0] ? props.table[0] : '';\n  const tomorrow = props.table[1] ? props.table[1] : '';\n  const dat = props.table[2] ? props.table[2] : '';\n\n  return(\n    <div className=\"table-area\">\n      <table className=\"table\" border=\"1\" cellSpacing=\"0\" cellPadding=\"0\">\n        <thead>\n          <tr>\n            <th className=\"date\"> {`今日（${today.date || ''}）の天気`} </th>\n            <th className=\"date\"> {`明日（${tomorrow.date || ''}）の天気`} </th>\n            <th className=\"date\"> {`明後日（${dat.date || ''}）の天気`} </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th className=\"weather-state\"> {today.telop} </th>\n            <th className=\"weather-state\"> {tomorrow.telop} </th>\n            <th className=\"weather-state\"> {dat.telop} </th>\n          </tr>\n          <tr>\n            <th className=\"temperature-max\"> {`最高気温：${today.temperatureMax || ''}`} </th>\n            <th className=\"temperature-max\"> {`最高気温：${tomorrow.temperatureMax || ''}`} </th>\n            <th className=\"temperature-max\"> {`最高気温：${dat.temperatureMax || ''}`} </th>\n          </tr>\n          <tr>\n          <th className=\"temperature-min\"> {`最低気温：${today.temperatureMin || ''}`} </th>\n          <th className=\"temperature-min\"> {`最低気温：${tomorrow.temperatureMin || ''}`} </th>\n          <th className=\"temperature-min\"> {`最低気温：${dat.temperatureMin || ''}`} </th>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n};\n\nexport default Table;\n","import React from \"react\";\nimport \"./Description.css\";\n\nconst Description = (props) => {\n  return(\n    <div className=\"description-area\">\n      <div className=\"description-title\"> {props.description.title} </div>\n      <div> {props.description.description.text} </div>\n    </div>\n  )\n}\n\nexport default Description;\n","import React from \"react\";\nimport \"./PinpointLocations.css\";\n\nconst PinpointLocations = (props) => {\n  return (\n  <div className=\"pinpoint-locations-area\">\n    <div className=\"pinpoint-locations-title\"> {\"詳細な天気\"}　</div>\n    <div className=\"pinpoint-locations-link\">\n      <ul>\n        {props.pinpointLocations.map((input) =>\n          <li key={input.name}><a href={input.link}>{input.name}</a></li>\n        )}\n      </ul>\n    </div>\n  </div>\n)\n}\n\n\nexport default PinpointLocations;\n","import {baseURL} from \"../../config/baseURL\"\n\nconst fetchWeatherInfo = (cityId) => {\n  const URL = baseURL + cityId;\n\n  return fetch(URL)\n    .then(response => response.json())\n    .catch(error => console.error(error));\n};\n\nexport default fetchWeatherInfo;\n","export const baseURL = process.env.REACT_APP_BASE_URL;\n","const tableAcquisition = (props) => {\n  if (props.forecasts) {\n    return props.forecasts.map(forecast => {\n      const {date, telop} = forecast\n\n      const temperatureMax = (\n        forecast.temperature &&\n        forecast.temperature.max &&\n        forecast.temperature.max.celsius) ||\n        null;\n      const temperatureMin = (\n          forecast.temperature &&\n          forecast.temperature.min &&\n          forecast.temperature.min.celsius) ||\n          null;\n      return {\n        date,\n        telop,\n        temperatureMax,\n        temperatureMin\n      }\n    });\n  };\n}\n\nexport default tableAcquisition;\n","const INPUT_DATA = [\n  {\n    'city_name': '稚内',\n    'id': '011000'\n  },\n  {\n    'city_name': '旭川',\n    'id': '012010'\n  },\n  {\n    'city_name': '留萌',\n    'id': '012020'\n  },\n  {\n    'city_name': '網走',\n    'id': '013010'\n  },\n  {\n    'city_name': '北見',\n    'id': '013020'\n  },\n  {\n    'city_name': '紋別',\n    'id': '013030'\n  },\n  {\n    'city_name': '根室',\n    'id': '014010'\n  },\n  {\n    'city_name': '釧路',\n    'id': '014020'\n  },\n  {\n    'city_name': '帯広',\n    'id': '014030'\n  },\n  {\n    'city_name': '室蘭',\n    'id': '015010'\n  },\n  {\n    'city_name': '浦河',\n    'id': '015020'\n  },\n  {\n    'city_name': '札幌',\n    'id': '016010'\n  },\n  {\n    'city_name': '岩見沢',\n    'id': '016020'\n  },\n  {\n    'city_name': '倶知安',\n    'id': '016030'\n  },\n  {\n    'city_name': '函館',\n    'id': '017010'\n  },\n  {\n    'city_name': '江差',\n    'id': '017020'\n  },\n  {\n    'city_name': '青森',\n    'id': '020010'\n  },\n  {\n    'city_name': 'むつ',\n    'id': '020020'\n  },\n  {\n    'city_name': '八戸',\n    'id': '020030'\n  },\n  {\n    'city_name': '盛岡',\n    'id': '030010'\n  },\n  {\n    'city_name': '宮古',\n    'id': '030020'\n  },\n  {\n    'city_name': '大船渡',\n    'id': '030030'\n  },\n  {\n    'city_name': '仙台',\n    'id': '040010'\n  },\n  {\n    'city_name': '白石',\n    'id': '040020'\n  },\n  {\n    'city_name': '秋田',\n    'id': '050010'\n  },\n  {\n    'city_name': '横手',\n    'id': '050020'\n  },\n  {\n    'city_name': '山形',\n    'id': '060010'\n  },\n  {\n    'city_name': '米沢',\n    'id': '060020'\n  },\n  {\n    'city_name': '酒田',\n    'id': '060030'\n  },\n  {\n    'city_name': '新庄',\n    'id': '060040'\n  },\n  {\n    'city_name': '福島',\n    'id': '070010'\n  },\n  {\n    'city_name': '小名浜',\n    'id': '070020'\n  },\n  {\n    'city_name': '若松',\n    'id': '070030'\n  },\n  {\n    'city_name': '水戸',\n    'id': '080010'\n  },\n  {\n    'city_name': '土浦',\n    'id': '080020'\n  },\n  {\n    'city_name': '宇都宮',\n    'id': '090010'\n  },\n  {\n    'city_name': '大田原',\n    'id': '090020'\n  },\n  {\n    'city_name': '前橋',\n    'id': '100010'\n  },\n  {\n    'city_name': 'みなかみ',\n    'id': '100020'\n  },\n  {\n    'city_name': 'さいたま',\n    'id': '110010'\n  },\n  {\n    'city_name': '熊谷',\n    'id': '110020'\n  },\n  {\n    'city_name': '秩父',\n    'id': '110030'\n  },\n  {\n    'city_name': '千葉',\n    'id': '120010'\n  },\n  {\n    'city_name': '銚子',\n    'id': '120020'\n  },\n  {\n    'city_name': '館山',\n    'id': '120030'\n  },\n  {\n    'city_name': '東京',\n    'id': '130010'\n  },\n  {\n    'city_name': '大島',\n    'id': '130020'\n  },\n  {\n    'city_name': '八丈島',\n    'id': '130030'\n  },\n  {\n    'city_name': '父島',\n    'id': '130040'\n  },\n  {\n    'city_name': '横浜',\n    'id': '140010'\n  },\n  {\n    'city_name': '小田原',\n    'id': '140020'\n  },\n  {\n    'city_name': '新潟',\n    'id': '150010'\n  },\n  {\n    'city_name': '長岡',\n    'id': '150020'\n  },\n  {\n    'city_name': '高田',\n    'id': '150030'\n  },\n  {\n    'city_name': '相川',\n    'id': '150040'\n  },\n  {\n    'city_name': '富山',\n    'id': '160010'\n  },\n  {\n    'city_name': '伏木',\n    'id': '160020'\n  },\n  {\n    'city_name': '金沢',\n    'id': '170010'\n  },\n  {\n    'city_name': '輪島',\n    'id': '170020'\n  },\n  {\n    'city_name': '福井',\n    'id': '180010'\n  },\n  {\n    'city_name': '敦賀',\n    'id': '180020'\n  },\n  {\n    'city_name': '甲府',\n    'id': '190010'\n  },\n  {\n    'city_name': '河口湖',\n    'id': '190020'\n  },\n  {\n    'city_name': '長野',\n    'id': '200010'\n  },\n  {\n    'city_name': '松本',\n    'id': '200020'\n  },\n  {\n    'city_name': '飯田',\n    'id': '200030'\n  },\n  {\n    'city_name': '岐阜',\n    'id': '210010'\n  },\n  {\n    'city_name': '高山',\n    'id': '210020'\n  },\n  {\n    'city_name': '静岡',\n    'id': '220010'\n  },\n  {\n    'city_name': '網代',\n    'id': '220020'\n  },\n  {\n    'city_name': '三島',\n    'id': '220030'\n  },\n  {\n    'city_name': '浜松',\n    'id': '220040'\n  },\n  {\n    'city_name': '名古屋',\n    'id': '230010'\n  },\n  {\n    'city_name': '豊橋',\n    'id': '230020'\n  },\n  {\n    'city_name': '津',\n    'id': '240010'\n  },\n  {\n    'city_name': '尾鷲',\n    'id': '240020'\n  },\n  {\n    'city_name': '大津',\n    'id': '250010'\n  },\n  {\n    'city_name': '彦根',\n    'id': '250020'\n  },\n  {\n    'city_name': '京都',\n    'id': '260010'\n  },\n  {\n    'city_name': '舞鶴',\n    'id': '260020'\n  },\n  {\n    'city_name': '大阪',\n    'id': '270000'\n  },\n  {\n    'city_name': '神戸',\n    'id': '280010'\n  },\n  {\n    'city_name': '豊岡',\n    'id': '280020'\n  },\n  {\n    'city_name': '奈良',\n    'id': '290010'\n  },\n  {\n    'city_name': '風屋',\n    'id': '290020'\n  },\n  {\n    'city_name': '和歌山',\n    'id': '300010'\n  },\n  {\n    'city_name': '潮岬',\n    'id': '300020'\n  },\n  {\n    'city_name': '鳥取',\n    'id': '310010'\n  },\n  {\n    'city_name': '米子',\n    'id': '310020'\n  },\n  {\n    'city_name': '松江',\n    'id': '320010'\n  },\n  {\n    'city_name': '浜田',\n    'id': '320020'\n  },\n  {\n    'city_name': '西郷',\n    'id': '320030'\n  },\n  {\n    'city_name': '岡山',\n    'id': '330010'\n  },\n  {\n    'city_name': '津山',\n    'id': '330020'\n  },\n  {\n    'city_name': '広島',\n    'id': '340010'\n  },\n  {\n    'city_name': '庄原',\n    'id': '340020'\n  },\n  {\n    'city_name': '下関',\n    'id': '350010'\n  },\n  {\n    'city_name': '山口',\n    'id': '350020'\n  },\n  {\n    'city_name': '柳井',\n    'id': '350030'\n  },\n  {\n    'city_name': '萩',\n    'id': '350040'\n  },\n  {\n    'city_name': '徳島',\n    'id': '360010'\n  },\n  {\n    'city_name': '日和佐',\n    'id': '360020'\n  },\n  {\n    'city_name': '高松',\n    'id': '370000'\n  },\n  {\n    'city_name': '松山',\n    'id': '380010'\n  },\n  {\n    'city_name': '新居浜',\n    'id': '380020'\n  },\n  {\n    'city_name': '宇和島',\n    'id': '380030'\n  },\n  {\n    'city_name': '高知',\n    'id': '390010'\n  },\n  {\n    'city_name': '室戸岬',\n    'id': '390020'\n  },\n  {\n    'city_name': '清水',\n    'id': '390030'\n  },\n  {\n    'city_name': '福岡',\n    'id': '400010'\n  },\n  {\n    'city_name': '八幡',\n    'id': '400020'\n  },\n  {\n    'city_name': '飯塚',\n    'id': '400030'\n  },\n  {\n    'city_name': '久留米',\n    'id': '400040'\n  },\n  {\n    'city_name': '佐賀',\n    'id': '410010'\n  },\n  {\n    'city_name': '伊万里',\n    'id': '410020'\n  },\n  {\n    'city_name': '長崎',\n    'id': '420010'\n  },\n  {\n    'city_name': '佐世保',\n    'id': '420020'\n  },\n  {\n    'city_name': '厳原',\n    'id': '420030'\n  },\n  {\n    'city_name': '福江',\n    'id': '420040'\n  },\n  {\n    'city_name': '熊本',\n    'id': '430010'\n  },\n  {\n    'city_name': '阿蘇乙姫',\n    'id': '430020'\n  },\n  {\n    'city_name': '牛深',\n    'id': '430030'\n  },\n  {\n    'city_name': '人吉',\n    'id': '430040'\n  },\n  {\n    'city_name': '大分',\n    'id': '440010'\n  },\n  {\n    'city_name': '中津',\n    'id': '440020'\n  },\n  {\n    'city_name': '日田',\n    'id': '440030'\n  },\n  {\n    'city_name': '佐伯',\n    'id': '440040'\n  },\n  {\n    'city_name': '宮崎',\n    'id': '450010'\n  },\n  {\n    'city_name': '延岡',\n    'id': '450020'\n  },\n  {\n    'city_name': '都城',\n    'id': '450030'\n  },\n  {\n    'city_name': '高千穂',\n    'id': '450040'\n  },\n  {\n    'city_name': '鹿児島',\n    'id': '460010'\n  },\n  {\n    'city_name': '鹿屋',\n    'id': '460020'\n  },\n  {\n    'city_name': '種子島',\n    'id': '460030'\n  },\n  {\n    'city_name': '名瀬',\n    'id': '460040'\n  },\n  {\n    'city_name': '那覇',\n    'id': '471010'\n  },\n  {\n    'city_name': '名護',\n    'id': '471020'\n  },\n  {\n    'city_name': '久米島',\n    'id': '471030'\n  },\n  {\n    'city_name': '南大東',\n    'id': '472000'\n  },\n  {\n    'city_name': '宮古島',\n    'id': '473000'\n  },\n  {\n    'city_name': '石垣島',\n    'id': '474010'\n  },\n  {\n    'city_name': '与那国島',\n    'id': '474020'\n  }\n];\nexport default INPUT_DATA;","import React, { Component } from 'react';\nimport './App.css';\nimport CitySelector from \"./components/CitySelector/CitySelector\";\nimport LocationInfo from \"./components/LocationInfo/LocationInfo\";\nimport Table from \"./components/Table/Table\";\nimport Description from \"./components/Description/Description\";\nimport PinpointLocations from \"./components/PinpointLocations/PinpointLocations\";\nimport fetchWeatherInfo from \"./components/dataAcquisitionAndOrganize/fetchWeatherInfo\";\nimport tableAcquisition from \"./components/dataAcquisitionAndOrganize/dataOrganize\";\nimport INPUT_DATA from './config/data';\n\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      this.state = ({\n        inputData: INPUT_DATA,\n        cityId : null,\n        location : {},\n        table : {},\n        description : {},\n        pinpointLocations : {}\n      })\n\n  }\n\n  componentDidMount() {\n    this.setState({\n      cityId: this.state.inputData[0].id\n    });\n\n  }\n\n  componentDidUpdate (_, prevState) {\n    if (this.state.cityId !== prevState.cityId) {\n      fetchWeatherInfo(this.state.cityId)\n         .then(weatherInfo => {\n           this.setState({\n             location : {locationArea: weatherInfo.location.area,\n                         locationPrefecture: weatherInfo.location.prefecture,\n                         locationCity: weatherInfo.location.city},\n             table : tableAcquisition(weatherInfo),\n             description : {title: weatherInfo.title,\n                            description: weatherInfo.description},\n\n             pinpointLocations : weatherInfo.pinpointLocations\n           })\n         })\n         .catch(error => console.error(error))\n       }\n     }\n\n\n  render() {\n    const onChangeCityId = (inputEvent) => {\n      this.setState({cityId: inputEvent.target.value});\n    }\n\n    return (\n      <div className=\"main\">\n        <CitySelector inputData={this.state.inputData} onChangeCityId={onChangeCityId} />\n        <LocationInfo\n          locationArea={this.state.location.locationArea}\n          locationPrefecture={this.state.location.locationPrefecture}\n          locationCity={this.state.location.locationCity}\n        />\n        {Object.keys(this.state.table).length !== 0 ?\n          <Table table={this.state.table} /> :\n            <div></div>}\n        {Object.keys(this.state.description).length !== 0 ?\n          <Description description={this.state.description} /> :\n            <div></div>}\n        {Object.keys(this.state.pinpointLocations).length !== 0　?\n          <PinpointLocations pinpointLocations = {this.state.pinpointLocations}/> :\n            <div></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}